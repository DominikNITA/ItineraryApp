// source: itinerary.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.itinerary.IdProtos', null, global);
goog.exportSymbol('proto.itinerary.LineProto', null, global);
goog.exportSymbol('proto.itinerary.LineProto.LinesCase', null, global);
goog.exportSymbol('proto.itinerary.LineProtos', null, global);
goog.exportSymbol('proto.itinerary.RandomStationNamesRequest', null, global);
goog.exportSymbol('proto.itinerary.StationNamesResponse', null, global);
goog.exportSymbol('proto.itinerary.StationProto', null, global);
goog.exportSymbol('proto.itinerary.StationProto.LinesCase', null, global);
goog.exportSymbol('proto.itinerary.StationProtos', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.itinerary.RandomStationNamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.itinerary.RandomStationNamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.itinerary.RandomStationNamesRequest.displayName = 'proto.itinerary.RandomStationNamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.itinerary.StationNamesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.itinerary.StationNamesResponse.repeatedFields_, null);
};
goog.inherits(proto.itinerary.StationNamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.itinerary.StationNamesResponse.displayName = 'proto.itinerary.StationNamesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.itinerary.LineProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.itinerary.LineProto.oneofGroups_);
};
goog.inherits(proto.itinerary.LineProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.itinerary.LineProto.displayName = 'proto.itinerary.LineProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.itinerary.LineProtos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.itinerary.LineProtos.repeatedFields_, null);
};
goog.inherits(proto.itinerary.LineProtos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.itinerary.LineProtos.displayName = 'proto.itinerary.LineProtos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.itinerary.StationProtos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.itinerary.StationProtos.repeatedFields_, null);
};
goog.inherits(proto.itinerary.StationProtos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.itinerary.StationProtos.displayName = 'proto.itinerary.StationProtos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.itinerary.StationProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.itinerary.StationProto.oneofGroups_);
};
goog.inherits(proto.itinerary.StationProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.itinerary.StationProto.displayName = 'proto.itinerary.StationProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.itinerary.IdProtos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.itinerary.IdProtos.repeatedFields_, null);
};
goog.inherits(proto.itinerary.IdProtos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.itinerary.IdProtos.displayName = 'proto.itinerary.IdProtos';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.itinerary.RandomStationNamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.itinerary.RandomStationNamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.itinerary.RandomStationNamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.RandomStationNamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    region: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.itinerary.RandomStationNamesRequest}
 */
proto.itinerary.RandomStationNamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.itinerary.RandomStationNamesRequest;
  return proto.itinerary.RandomStationNamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.itinerary.RandomStationNamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.itinerary.RandomStationNamesRequest}
 */
proto.itinerary.RandomStationNamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.itinerary.RandomStationNamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.itinerary.RandomStationNamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.itinerary.RandomStationNamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.RandomStationNamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.itinerary.RandomStationNamesRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.itinerary.RandomStationNamesRequest} returns this
 */
proto.itinerary.RandomStationNamesRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string region = 2;
 * @return {string}
 */
proto.itinerary.RandomStationNamesRequest.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.itinerary.RandomStationNamesRequest} returns this
 */
proto.itinerary.RandomStationNamesRequest.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.itinerary.StationNamesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.itinerary.StationNamesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.itinerary.StationNamesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.itinerary.StationNamesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.StationNamesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationNamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.itinerary.StationNamesResponse}
 */
proto.itinerary.StationNamesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.itinerary.StationNamesResponse;
  return proto.itinerary.StationNamesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.itinerary.StationNamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.itinerary.StationNamesResponse}
 */
proto.itinerary.StationNamesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addStationNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.itinerary.StationNamesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.itinerary.StationNamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.itinerary.StationNamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.StationNamesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStationNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string station_names = 1;
 * @return {!Array<string>}
 */
proto.itinerary.StationNamesResponse.prototype.getStationNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.itinerary.StationNamesResponse} returns this
 */
proto.itinerary.StationNamesResponse.prototype.setStationNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.itinerary.StationNamesResponse} returns this
 */
proto.itinerary.StationNamesResponse.prototype.addStationNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.itinerary.StationNamesResponse} returns this
 */
proto.itinerary.StationNamesResponse.prototype.clearStationNamesList = function() {
  return this.setStationNamesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.itinerary.LineProto.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.itinerary.LineProto.LinesCase = {
  LINES_NOT_SET: 0,
  STATION_OBJECTS: 3,
  STATION_IDS: 4
};

/**
 * @return {proto.itinerary.LineProto.LinesCase}
 */
proto.itinerary.LineProto.prototype.getLinesCase = function() {
  return /** @type {proto.itinerary.LineProto.LinesCase} */(jspb.Message.computeOneofCase(this, proto.itinerary.LineProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.itinerary.LineProto.prototype.toObject = function(opt_includeInstance) {
  return proto.itinerary.LineProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.itinerary.LineProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.LineProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stationObjects: (f = msg.getStationObjects()) && proto.itinerary.StationProtos.toObject(includeInstance, f),
    stationIds: (f = msg.getStationIds()) && proto.itinerary.IdProtos.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.itinerary.LineProto}
 */
proto.itinerary.LineProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.itinerary.LineProto;
  return proto.itinerary.LineProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.itinerary.LineProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.itinerary.LineProto}
 */
proto.itinerary.LineProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 3:
      var value = new proto.itinerary.StationProtos;
      reader.readMessage(value,proto.itinerary.StationProtos.deserializeBinaryFromReader);
      msg.setStationObjects(value);
      break;
    case 4:
      var value = new proto.itinerary.IdProtos;
      reader.readMessage(value,proto.itinerary.IdProtos.deserializeBinaryFromReader);
      msg.setStationIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.itinerary.LineProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.itinerary.LineProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.itinerary.LineProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.LineProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStationObjects();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.itinerary.StationProtos.serializeBinaryToWriter
    );
  }
  f = message.getStationIds();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.itinerary.IdProtos.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.itinerary.LineProto.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.itinerary.LineProto} returns this
 */
proto.itinerary.LineProto.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 number = 2;
 * @return {number}
 */
proto.itinerary.LineProto.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.itinerary.LineProto} returns this
 */
proto.itinerary.LineProto.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional StationProtos station_objects = 3;
 * @return {?proto.itinerary.StationProtos}
 */
proto.itinerary.LineProto.prototype.getStationObjects = function() {
  return /** @type{?proto.itinerary.StationProtos} */ (
    jspb.Message.getWrapperField(this, proto.itinerary.StationProtos, 3));
};


/**
 * @param {?proto.itinerary.StationProtos|undefined} value
 * @return {!proto.itinerary.LineProto} returns this
*/
proto.itinerary.LineProto.prototype.setStationObjects = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.itinerary.LineProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.itinerary.LineProto} returns this
 */
proto.itinerary.LineProto.prototype.clearStationObjects = function() {
  return this.setStationObjects(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.itinerary.LineProto.prototype.hasStationObjects = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IdProtos station_ids = 4;
 * @return {?proto.itinerary.IdProtos}
 */
proto.itinerary.LineProto.prototype.getStationIds = function() {
  return /** @type{?proto.itinerary.IdProtos} */ (
    jspb.Message.getWrapperField(this, proto.itinerary.IdProtos, 4));
};


/**
 * @param {?proto.itinerary.IdProtos|undefined} value
 * @return {!proto.itinerary.LineProto} returns this
*/
proto.itinerary.LineProto.prototype.setStationIds = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.itinerary.LineProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.itinerary.LineProto} returns this
 */
proto.itinerary.LineProto.prototype.clearStationIds = function() {
  return this.setStationIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.itinerary.LineProto.prototype.hasStationIds = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.itinerary.LineProtos.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.itinerary.LineProtos.prototype.toObject = function(opt_includeInstance) {
  return proto.itinerary.LineProtos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.itinerary.LineProtos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.LineProtos.toObject = function(includeInstance, msg) {
  var f, obj = {
    linesList: jspb.Message.toObjectList(msg.getLinesList(),
    proto.itinerary.LineProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.itinerary.LineProtos}
 */
proto.itinerary.LineProtos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.itinerary.LineProtos;
  return proto.itinerary.LineProtos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.itinerary.LineProtos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.itinerary.LineProtos}
 */
proto.itinerary.LineProtos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.itinerary.LineProto;
      reader.readMessage(value,proto.itinerary.LineProto.deserializeBinaryFromReader);
      msg.addLines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.itinerary.LineProtos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.itinerary.LineProtos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.itinerary.LineProtos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.LineProtos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.itinerary.LineProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LineProto lines = 1;
 * @return {!Array<!proto.itinerary.LineProto>}
 */
proto.itinerary.LineProtos.prototype.getLinesList = function() {
  return /** @type{!Array<!proto.itinerary.LineProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.itinerary.LineProto, 1));
};


/**
 * @param {!Array<!proto.itinerary.LineProto>} value
 * @return {!proto.itinerary.LineProtos} returns this
*/
proto.itinerary.LineProtos.prototype.setLinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.itinerary.LineProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.itinerary.LineProto}
 */
proto.itinerary.LineProtos.prototype.addLines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.itinerary.LineProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.itinerary.LineProtos} returns this
 */
proto.itinerary.LineProtos.prototype.clearLinesList = function() {
  return this.setLinesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.itinerary.StationProtos.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.itinerary.StationProtos.prototype.toObject = function(opt_includeInstance) {
  return proto.itinerary.StationProtos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.itinerary.StationProtos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.StationProtos.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationsList: jspb.Message.toObjectList(msg.getStationsList(),
    proto.itinerary.StationProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.itinerary.StationProtos}
 */
proto.itinerary.StationProtos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.itinerary.StationProtos;
  return proto.itinerary.StationProtos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.itinerary.StationProtos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.itinerary.StationProtos}
 */
proto.itinerary.StationProtos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.itinerary.StationProto;
      reader.readMessage(value,proto.itinerary.StationProto.deserializeBinaryFromReader);
      msg.addStations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.itinerary.StationProtos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.itinerary.StationProtos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.itinerary.StationProtos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.StationProtos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.itinerary.StationProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StationProto stations = 1;
 * @return {!Array<!proto.itinerary.StationProto>}
 */
proto.itinerary.StationProtos.prototype.getStationsList = function() {
  return /** @type{!Array<!proto.itinerary.StationProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.itinerary.StationProto, 1));
};


/**
 * @param {!Array<!proto.itinerary.StationProto>} value
 * @return {!proto.itinerary.StationProtos} returns this
*/
proto.itinerary.StationProtos.prototype.setStationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.itinerary.StationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.itinerary.StationProto}
 */
proto.itinerary.StationProtos.prototype.addStations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.itinerary.StationProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.itinerary.StationProtos} returns this
 */
proto.itinerary.StationProtos.prototype.clearStationsList = function() {
  return this.setStationsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.itinerary.StationProto.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.itinerary.StationProto.LinesCase = {
  LINES_NOT_SET: 0,
  LINE_OBJECTS: 3,
  LINE_IDS: 4
};

/**
 * @return {proto.itinerary.StationProto.LinesCase}
 */
proto.itinerary.StationProto.prototype.getLinesCase = function() {
  return /** @type {proto.itinerary.StationProto.LinesCase} */(jspb.Message.computeOneofCase(this, proto.itinerary.StationProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.itinerary.StationProto.prototype.toObject = function(opt_includeInstance) {
  return proto.itinerary.StationProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.itinerary.StationProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.StationProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lineObjects: (f = msg.getLineObjects()) && proto.itinerary.LineProtos.toObject(includeInstance, f),
    lineIds: (f = msg.getLineIds()) && proto.itinerary.IdProtos.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.itinerary.StationProto}
 */
proto.itinerary.StationProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.itinerary.StationProto;
  return proto.itinerary.StationProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.itinerary.StationProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.itinerary.StationProto}
 */
proto.itinerary.StationProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.itinerary.LineProtos;
      reader.readMessage(value,proto.itinerary.LineProtos.deserializeBinaryFromReader);
      msg.setLineObjects(value);
      break;
    case 4:
      var value = new proto.itinerary.IdProtos;
      reader.readMessage(value,proto.itinerary.IdProtos.deserializeBinaryFromReader);
      msg.setLineIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.itinerary.StationProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.itinerary.StationProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.itinerary.StationProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.StationProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLineObjects();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.itinerary.LineProtos.serializeBinaryToWriter
    );
  }
  f = message.getLineIds();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.itinerary.IdProtos.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.itinerary.StationProto.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.itinerary.StationProto} returns this
 */
proto.itinerary.StationProto.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.itinerary.StationProto.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.itinerary.StationProto} returns this
 */
proto.itinerary.StationProto.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LineProtos line_objects = 3;
 * @return {?proto.itinerary.LineProtos}
 */
proto.itinerary.StationProto.prototype.getLineObjects = function() {
  return /** @type{?proto.itinerary.LineProtos} */ (
    jspb.Message.getWrapperField(this, proto.itinerary.LineProtos, 3));
};


/**
 * @param {?proto.itinerary.LineProtos|undefined} value
 * @return {!proto.itinerary.StationProto} returns this
*/
proto.itinerary.StationProto.prototype.setLineObjects = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.itinerary.StationProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.itinerary.StationProto} returns this
 */
proto.itinerary.StationProto.prototype.clearLineObjects = function() {
  return this.setLineObjects(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.itinerary.StationProto.prototype.hasLineObjects = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IdProtos line_ids = 4;
 * @return {?proto.itinerary.IdProtos}
 */
proto.itinerary.StationProto.prototype.getLineIds = function() {
  return /** @type{?proto.itinerary.IdProtos} */ (
    jspb.Message.getWrapperField(this, proto.itinerary.IdProtos, 4));
};


/**
 * @param {?proto.itinerary.IdProtos|undefined} value
 * @return {!proto.itinerary.StationProto} returns this
*/
proto.itinerary.StationProto.prototype.setLineIds = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.itinerary.StationProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.itinerary.StationProto} returns this
 */
proto.itinerary.StationProto.prototype.clearLineIds = function() {
  return this.setLineIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.itinerary.StationProto.prototype.hasLineIds = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.itinerary.IdProtos.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.itinerary.IdProtos.prototype.toObject = function(opt_includeInstance) {
  return proto.itinerary.IdProtos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.itinerary.IdProtos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.IdProtos.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.itinerary.IdProtos}
 */
proto.itinerary.IdProtos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.itinerary.IdProtos;
  return proto.itinerary.IdProtos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.itinerary.IdProtos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.itinerary.IdProtos}
 */
proto.itinerary.IdProtos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.itinerary.IdProtos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.itinerary.IdProtos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.itinerary.IdProtos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.itinerary.IdProtos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 ids = 1;
 * @return {!Array<number>}
 */
proto.itinerary.IdProtos.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.itinerary.IdProtos} returns this
 */
proto.itinerary.IdProtos.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.itinerary.IdProtos} returns this
 */
proto.itinerary.IdProtos.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.itinerary.IdProtos} returns this
 */
proto.itinerary.IdProtos.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


goog.object.extend(exports, proto.itinerary);
